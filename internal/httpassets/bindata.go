// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package httpassets generated by go-bindata.// sources:
// static/error.html
// static/images/error.svg
// static/images/hashi.svg
// static/images/logo.svg
// static/images/pattern-br.svg
// static/images/pattern-tl.svg
// static/index.html
// static/style.css
package httpassets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _errorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcd\x6a\xdc\x30\x10\xc7\xcf\xbb\x4f\x31\xd5\xa5\xa7\x58\xa4\x97\x42\x91\x7d\xd9\x06\x1a\x08\xb4\x94\x96\x92\xa3\x2a\x8f\x2d\x35\xb2\xc6\x48\xe3\x75\xfc\xf6\x45\xde\x2f\x2d\x4d\x43\xf6\xb2\x48\xf3\xf5\x9b\x99\xbf\xac\xde\x7d\xfe\xba\xfb\xf1\xf8\xed\x0e\x2c\x0f\xbe\xd9\xaa\xc3\xdf\x46\x59\xd4\x6d\xb3\xdd\x6c\x14\x3b\xf6\xd8\xfc\xd2\xcb\x48\x2e\x70\x15\xa7\xa0\xe4\xe1\x2e\x5b\xbd\x0b\x4f\x10\xd1\xd7\x22\xf1\xe2\x31\x59\x44\x16\xc0\xcb\x88\xb5\x60\x7c\x66\x69\x52\x12\x60\x23\x76\xb5\x90\x89\x35\x3b\x23\x57\xcf\x6a\x35\xc8\x5c\x4a\x1e\x6a\x6d\x37\xea\x37\xb5\x0b\x18\xaf\x53\xaa\x85\xd5\xe9\x06\x63\xa4\x28\xd6\x42\xad\xdb\x9f\x2c\x86\x02\x6b\x17\x30\x5b\x60\xfd\xad\xb4\x18\x4f\x47\x00\xa5\x8f\x35\x2d\xf3\x98\x3e\x49\x39\x1f\xf9\xc7\x48\x7f\xd0\x70\xe5\x48\x9c\xd2\x79\xea\x49\x5c\x42\x01\x94\x1b\x7a\x48\xd1\x5c\x88\xdd\xa0\x7b\x4c\x32\x7b\x56\x69\xdf\x0b\xd0\x9e\x6b\xf1\x90\x03\xc1\xa2\xeb\x2d\xd7\xe2\xe3\x87\xb5\x9d\x73\x12\xa9\xcf\x74\xf2\x1a\x4f\x25\x34\xec\x28\x94\xfd\x60\xe0\x82\xa1\xec\x76\x9d\xc1\x8d\x33\x14\xde\x06\xb9\xfa\x17\x94\x77\xf9\x0c\xf7\x39\xfe\x9a\xaf\x75\xfb\xe2\x68\x6f\x9b\x1d\x4d\xbe\x0d\xef\x19\x3a\x17\x5a\xd0\x70\xda\x39\xb4\x38\x7a\x5a\x06\x0c\x0c\xb3\x63\x0b\x6c\x5d\x82\x9f\xdf\x1f\x2a\x25\xed\x6d\x91\x63\xcc\x9b\xba\xef\x60\xa1\x09\xf0\x79\x44\xc3\xd8\x02\x13\x24\x44\xd0\x65\x16\x8b\x11\x57\xaf\x21\xcf\x0e\x66\x1d\x38\xfb\x19\x8b\xe6\x29\xdf\x47\xf0\xd4\xa7\x53\xa8\xeb\x20\xd1\x80\x6c\x5d\xe8\x61\x5e\x29\x22\x85\xbe\x2a\x7a\x19\xaf\x29\x2e\x63\x7a\xa4\x09\x8c\x0e\xa0\x7d\x22\x88\xd8\x61\xcc\x59\xd9\xe2\x0b\x12\x99\xe7\xea\x5f\x99\xc8\x96\x4c\x92\x53\xf4\xa2\x69\xc9\x4c\x19\x5f\xe7\xe5\xe5\xfd\x42\x47\x11\x2c\xfa\xf1\x30\x96\xf3\x1b\x79\x09\x4c\xc9\xe3\xd6\xcf\x17\x1d\x11\xbf\xaa\x59\xab\x93\x75\x86\xe2\x58\x19\x1a\x44\xf1\x2e\xac\x7b\x9b\x14\x56\xd7\x42\x0a\x5f\xf2\x79\x47\x71\xfc\xbf\x52\x4b\xa8\xa3\x44\x36\x4a\xe6\x77\xd9\x6c\x95\x3c\x7c\x1c\xfe\x06\x00\x00\xff\xff\xa7\xdc\x15\xa0\x34\x04\x00\x00")

func errorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_errorHtml,
		"error.html",
	)
}

func errorHtml() (*asset, error) {
	bytes, err := errorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error.html", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1602631105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesErrorSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xcd\x6e\xda\x40\x10\x80\xef\x3c\xc5\x68\x7b\x75\xc6\xf3\xbb\x3b\x5b\x61\x0e\xe5\x4a\x5e\x20\xb7\x4a\xb8\x18\x89\x86\x28\xb8\x38\x8f\x5f\x51\x38\x98\x26\xdc\x76\x3f\xad\xbe\x6f\x47\x9a\xe5\xe9\xbc\x83\x8f\xdf\x87\xd7\x53\x97\x86\x71\x7c\xfb\xde\xb6\xd3\x34\xe1\xa4\x78\x7c\xdf\xb5\x42\x44\xed\xe9\xbc\x4b\x30\xed\xb7\xe3\xd0\x25\xb3\x04\x43\xbf\xdf\x0d\xe3\xf5\x7c\xde\xf7\xd3\x8f\xe3\x47\x97\x08\x08\xcc\xc0\x2c\xad\x16\x00\xcb\xb7\x9f\xe3\x00\xbf\xf6\x87\x43\x97\xbe\xad\x33\x19\x59\xfa\x77\x7d\x7a\xff\x73\xe8\xbb\xd4\x9f\xfb\xd7\xe3\x76\x9b\x60\xdb\xa5\x67\x0d\xf4\x08\xd2\x28\x8d\x16\x2c\x0e\x6b\x63\xac\x41\x94\x45\x6f\xc4\x0c\x99\x98\x4b\x68\xa3\x86\x6c\x9a\xc9\x03\x4c\xd0\x88\x4a\x66\x6d\x94\x51\xb2\x8a\x99\xc0\x46\x1c\x83\x25\xc2\x1b\x45\x76\x37\xaa\x1a\xb0\x16\x43\xe6\x1c\x45\xa5\x21\x94\x60\x57\x12\x2a\xc0\x15\x23\x3c\xbb\xfd\x87\x03\x39\x8a\x69\x8d\xb9\x64\xc3\xe8\xb5\x7a\x56\xf3\x79\x71\xfd\x44\xc8\x44\xe1\xea\xd9\xaf\x1f\x64\x33\x07\x41\xe2\x20\xaf\x91\x6f\x63\x38\xda\xe5\x9d\x9a\xdd\xc0\xe6\xd3\xec\x2f\xf0\x2c\x86\x42\x52\x8a\xf3\x35\x52\x3c\xfb\xa5\x5d\xb1\xd4\xe2\x56\xcb\x23\x2c\x19\xab\x79\x35\x85\xcd\xcc\xf1\x35\x9d\x29\xee\x93\x22\x98\xc5\x54\x48\xee\xdd\x5f\x63\x56\xac\xc1\x54\xcc\xef\xec\x0f\xf0\x4c\xf2\x92\xda\xd5\x62\x79\xd9\xad\xd5\xe2\x6f\x00\x00\x00\xff\xff\x30\xa5\x4a\x07\x84\x02\x00\x00")

func imagesErrorSvgBytes() ([]byte, error) {
	return bindataRead(
		_imagesErrorSvg,
		"images/error.svg",
	)
}

func imagesErrorSvg() (*asset, error) {
	bytes, err := imagesErrorSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/error.svg", size: 644, mode: os.FileMode(420), modTime: time.Unix(1602009792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesHashiSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xcd\x6a\x1b\x41\x10\x84\xef\x7a\x8a\x61\x72\x5d\xb7\xfa\xbf\x7b\x82\x56\x90\x9c\xd7\x2f\xe0\x5b\xc0\x8a\x24\x50\x62\x13\x09\xad\x1f\x3f\xac\xc0\x58\x83\x93\x63\x7f\xc3\x54\x15\xd5\xbd\x39\x5f\xf7\xe5\xed\xd7\xe9\xf7\x79\xac\x87\xcb\xe5\xf5\xeb\x7a\x3d\xcf\x33\xcc\x02\x2f\x7f\xf6\x6b\x46\xc4\xf5\xf9\xba\xaf\x65\x3e\x3e\x5f\x0e\x63\x65\xad\xe5\xb0\x3b\xee\x0f\x97\xb1\xb2\xd5\x72\x3d\xee\xe6\xef\x2f\x6f\x63\xc5\x82\x85\xb5\xb0\xd5\xed\xaa\x94\xcd\xeb\x8f\xcb\xa1\xfc\x3c\x9e\x4e\x63\xfd\xd2\xa8\xe5\x37\xaa\xe5\x79\xac\x8f\x8c\xc0\x4a\xa8\x3e\x08\x98\x91\x47\xa4\x95\x89\x75\x30\xf0\xb4\x86\x8e\x7a\x1b\xa9\x81\x30\x93\x46\x94\x89\x04\x5a\x73\x12\xe5\x81\xad\x1f\x11\x42\x94\x39\xb9\x4c\x1f\xca\x14\x40\x19\xac\x29\xf7\xf4\xce\xef\xa9\x3c\xde\x44\x2c\x9a\xd0\x80\x80\x48\x88\x1e\x44\x4a\x65\xa2\x80\x30\xc3\x4c\x1a\x18\x48\xcc\x02\x35\x3a\x4c\x0e\x68\x11\x94\xd4\x85\xa1\x04\x6a\xc2\x99\xde\x63\x05\x72\x57\x95\x32\xd1\x62\x25\x94\xe2\xff\xa1\xac\x4b\x2a\x41\x2e\x93\x03\xab\x36\xa2\xcc\x81\x19\xf2\x3d\xc6\x1d\x4e\x68\x4a\x4e\x18\xda\x69\x38\x24\x86\x24\x9b\xf5\x86\x08\xe9\xa8\xc8\x7d\xa1\x9f\xf0\xbf\x3a\x59\xfa\xfa\x50\xc2\x4e\x57\x81\xfd\xbd\x0c\x81\xb0\xe4\xa0\xb0\x21\x20\x89\x31\xd1\xb4\xc3\x4c\xa0\x9a\xcb\x66\xcb\xf4\x40\x40\xe2\xe9\x29\xb9\x7b\x20\xb9\xad\x9c\x14\x9b\x7e\x7e\x32\xf0\x9b\xc5\xf2\xad\x4b\xf2\x54\xd7\xdb\xd5\x66\xb9\xd0\xed\xea\x6f\x00\x00\x00\xff\xff\x94\x05\x16\xfe\xca\x02\x00\x00")

func imagesHashiSvgBytes() ([]byte, error) {
	return bindataRead(
		_imagesHashiSvg,
		"images/hashi.svg",
	)
}

func imagesHashiSvg() (*asset, error) {
	bytes, err := imagesHashiSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/hashi.svg", size: 714, mode: os.FileMode(420), modTime: time.Unix(1602006202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesLogoSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\xc1\xce\x9b\x40\x0c\x84\xef\x79\x0a\x6b\x7b\x25\xc6\xf6\x7a\xbd\xbb\x55\xc8\xa1\xb9\x92\x17\xc8\xad\x12\x14\x90\x68\x12\x25\x14\xf2\xf8\x15\xf4\xd0\x9f\xe3\x8c\x3c\x63\x7f\xf2\xe9\x3d\x77\xf0\xf9\x3d\xde\xdf\x95\xeb\xa7\xe9\xf9\xbd\x2c\x97\x65\xc1\xc5\xe3\xe3\xd5\x95\x42\x44\xe5\x7b\xee\x1c\x2c\x43\x33\xf5\x95\xb3\xe0\xa0\x6f\x87\xae\x9f\x2a\xa7\xe2\x60\x1e\xda\xe5\xc7\xe3\x53\x39\x02\x02\x0b\xa0\xe2\xce\x07\x80\xd3\xf3\xe7\xd4\xc3\xaf\x61\x1c\x2b\xf7\x8d\xf4\x62\x17\x71\x9b\x3c\xbe\xfe\x8c\x6d\xe5\xda\xb9\xbd\x3f\x9a\xc6\x41\x53\xb9\xab\x44\x24\xa2\x20\xcc\x05\x41\xad\x84\x81\x38\x89\xcf\x85\x78\xf4\xde\x07\x4e\x02\xb5\x7a\xe4\x9c\xd9\x4c\x0a\x4e\x68\x16\x95\x63\x82\xda\x0b\x2a\x91\xb2\xe5\x2d\xfb\x7f\x68\x55\x09\x8d\x84\x53\x8a\x45\x46\xef\x43\x52\x26\x81\x3a\xe8\xae\xe1\xcb\x3e\x15\xa8\x85\xd1\x88\xcd\xa2\xed\x42\x6c\x28\xc4\x31\x72\xda\xd9\x92\xd1\x72\xce\x1a\x73\xe1\x05\xcd\x2c\x86\xcc\x50\x8b\xa2\xff\x87\xb4\x75\x1e\x15\x73\xf4\x31\x67\x0e\xed\x91\x75\xbd\x6d\xc7\x7c\x83\xab\x85\xd5\x0d\xb1\x60\x85\x5a\x37\x98\xcd\xba\xb9\xf2\x7c\x38\xad\x2f\x38\x1f\xfe\x06\x00\x00\xff\xff\xa8\xf9\xb0\x5e\xab\x01\x00\x00")

func imagesLogoSvgBytes() ([]byte, error) {
	return bindataRead(
		_imagesLogoSvg,
		"images/logo.svg",
	)
}

func imagesLogoSvg() (*asset, error) {
	bytes, err := imagesLogoSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/logo.svg", size: 427, mode: os.FileMode(420), modTime: time.Unix(1602003003, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesPatternBrSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdb\x72\xda\xb0\x16\x7d\xef\x57\x78\xd4\xe9\x4c\xfb\x80\xd0\xfd\x72\x06\x77\x86\x5b\xce\x77\xd0\x60\x08\x2d\xc1\xd4\x38\x90\xf4\xeb\xcf\xe0\x8b\x22\xc7\x32\xe2\xd6\x9e\xb4\xf8\xcd\x62\x34\x8b\xad\xb5\xf6\x5e\xda\xde\xd0\xdb\x6c\xe7\xc1\xf3\xe3\x72\xb5\x09\xc1\x43\x9a\xae\xff\xd3\xed\xee\x76\x3b\xb8\xa3\x30\x4e\xe6\x5d\x82\x10\xea\x6e\xb6\x73\x10\xec\x16\xd3\xf4\x21\x04\x44\x09\x10\x3c\x44\x8b\xf9\x43\x1a\x02\x81\x08\x08\xb6\x8b\x68\x37\x88\x9f\x43\x80\x02\x14\x10\x25\x82\xfd\xa7\x5f\x3f\x04\x41\x6f\x1a\xcd\x36\xfb\x87\x20\xe8\x2d\x17\xab\x68\x92\xfc\x37\x99\x4c\x17\xd1\x2a\x0d\x16\xd3\x10\xac\x27\x69\x1a\x25\xab\xce\xb7\xa4\x33\x01\xc1\x33\x0e\x41\x07\x43\xa2\xe8\x27\x10\x3c\x93\x10\x60\x54\xae\x5e\x70\x08\x38\xda\x3f\x90\xfc\x21\xc7\x0c\x82\xde\x26\x8d\xd7\x41\x3c\x9b\x6d\xa2\x34\x04\x58\x7c\x02\xc1\xfe\x93\xce\x7d\xbc\x8c\x93\x10\x7c\xc4\x6c\x28\x86\x03\xd0\x75\xef\xd7\xb5\xfd\x68\x24\x87\xf2\xae\xdc\xdf\xeb\x56\x83\x3e\xea\x24\xdf\xfe\x99\x93\xdc\x17\x27\x81\xd2\x1c\x03\x65\xcf\x47\x1e\x82\xd2\xd3\x0e\xc1\x50\x6d\x3f\x1d\xdc\x0d\x59\xe3\x7e\x5d\xdb\x8f\xfb\xa3\x01\x6e\xda\x2f\x6a\xf8\x68\xac\xc6\xba\x71\xbf\x24\xb5\xfd\x7d\x41\x85\x68\xda\xaf\xea\x22\x70\x32\x22\xe3\x43\xa2\x5d\xa2\xcf\xb4\xd4\x47\x30\x6c\x29\x94\xaf\x5a\x8d\xde\x85\x46\x51\xa9\x91\xe2\xdc\xd2\x28\x5f\xb5\x1a\xbd\x0b\x8d\x66\xc6\xe7\x2a\x46\xd7\x3a\xdd\xbb\x51\x68\x5e\x2a\xc4\x35\xb1\x24\xca\x57\xad\x46\xef\x42\xa3\x87\x52\x23\xa2\xec\x32\xca\x57\x7b\x8d\x98\x86\x5a\xeb\x42\xa7\x72\xe1\x8e\x85\xd4\xb9\x3f\xa8\x15\x61\x0e\xee\x79\x5f\x37\xed\xa7\x75\xee\x47\x72\x20\x47\x8d\xfb\xeb\x5c\x6a\x2e\x79\x23\x3e\xab\x6b\x25\xe8\x90\x36\xe2\x33\xe5\xd0\x4a\x93\x46\x7c\x5e\xcb\x65\x44\xf1\x08\x37\xe2\xf3\x5a\x6e\x22\x8a\x35\x6e\xc4\x97\xae\xfd\x02\x37\xe6\x9a\xae\xf3\x49\xd0\x18\x35\xe6\x1a\x46\xe8\xb2\x64\x5b\x98\x64\xe3\x95\x64\xe3\x27\x98\x76\x9b\x64\x6d\x92\x1d\x4c\xb2\xef\x26\xc9\x44\x99\x64\x1d\x86\x09\x54\xd9\xdb\x56\x9b\x65\x6d\x96\x5d\x23\xcb\x7e\x98\x79\x81\xce\xb4\x2f\xe7\x05\xf9\xea\x37\xcd\x0b\x38\xae\xed\x47\x7a\xdc\x27\x27\xb0\x38\x56\x5c\xa9\x3f\x3a\x8f\x58\x5a\x4c\xf1\x0a\x53\x27\xbc\x4c\xdd\x04\x53\x8f\x66\x32\x80\x2a\x93\x01\xf4\x3a\x19\x80\x08\x11\x43\x56\xbe\xb8\x0e\x61\xb4\x6e\x60\x74\x30\x1c\x36\xf7\xc1\xdc\x61\x78\xa4\xdf\x58\xa0\x59\xc1\x5d\x9d\xb1\x55\xc1\x18\x81\x92\x19\xb3\xe7\x58\x62\xa8\xa5\xfa\x7d\xd9\xf5\x77\x92\x15\x9b\x42\x14\xa8\x1c\x71\x76\x88\x96\x02\x52\x74\x42\x03\x76\x1b\x64\xad\xcd\x74\x01\x1b\xae\x30\x11\x12\x72\xa5\xda\x6a\x74\x73\xf6\xd3\x24\x18\xa6\xc4\x24\x18\x92\x18\x4a\x2d\x6d\xd2\xa8\x4d\x1a\xbd\x6d\xd2\x12\x33\x6a\x94\xdc\x24\x1a\x97\x0a\x52\xa2\x5a\xce\xdc\x9c\x6d\xae\x30\x58\xba\x0d\xa6\xd2\x82\x29\x0d\xb9\x36\x17\x24\x56\x14\x0b\xc8\x5b\xd3\x7f\xcb\xd6\x53\x99\x57\xba\x32\x0c\xd3\xea\x0f\xb8\x17\x96\x8e\xfd\x7c\xd8\xfc\x86\x57\xdf\x8f\xf4\xa8\xdf\x3c\x88\xac\x75\xc4\x87\x3b\x5c\xc7\x20\xf2\x72\x82\xb7\xe6\x86\xa0\xc4\xa4\x23\x61\x4c\x40\x8c\x84\xcd\x31\xb3\x39\x66\x2d\xc7\x27\x70\xbc\x2b\x38\x66\x90\x48\x73\x0b\x2b\xa4\x25\xa4\x9c\x58\x1c\x63\xbb\x75\xc1\x57\x6b\x5d\x6e\x82\xe3\x67\xd3\x1d\xaa\xd7\x4b\x9b\x21\x09\x31\xfa\x03\xdd\xe1\x4d\x50\xfc\x62\x5e\x86\xb9\xc9\x62\x8c\x39\x86\x12\x93\x96\xe2\xab\x50\xfc\xcb\xbc\x3d\x23\x33\x99\xe9\x50\xa9\x38\x64\xa8\xc2\xb1\xb0\x39\x16\x2d\xc7\x27\x70\xdc\xbf\xf8\x57\xea\x9b\x18\x7d\x0d\xea\x86\x9a\xf1\xa4\xb8\xfd\x33\xa4\xb2\x7f\x86\x54\x37\x4d\xd8\xd0\x51\xbb\x18\x95\x2b\xc3\x18\xb3\x19\xbb\x5a\x1f\xf5\x57\x32\x36\x72\xf4\x9e\x18\x95\x2b\xc3\x98\xb0\x19\xbb\x9a\xd7\xfd\x95\x8c\x8d\x7d\xaf\x43\x19\x47\xd2\x26\x4c\xde\x34\x61\x77\x8e\xd6\x1b\xa3\x72\x55\x32\xa6\x6c\x1b\x53\xff\xb4\x8d\xf5\xba\xe5\x5f\x89\x7b\xf3\x60\xb6\x58\x2e\x43\xb0\x8a\x57\x11\xc8\x9e\x3b\xc9\xd3\x32\x0a\x41\xb4\x8d\x56\xf1\x74\xba\xc7\x4e\xe2\x1f\x51\x67\x8f\x72\x3f\x59\x87\x20\x89\x9f\x56\x53\x10\xc4\xeb\xc9\xfd\x22\x7d\x09\x01\x14\x20\x48\x93\xc9\x6a\x33\x8b\x93\xc7\x10\x64\x8f\xcb\x49\x1a\x7d\xc6\x01\xfe\x02\x2c\x81\x32\x11\xb0\x84\x94\xe4\x12\x08\x0d\x89\xca\xf9\x17\x08\x15\xf7\x2d\x46\xe5\x37\x86\xe0\x29\x59\x7e\xfe\x68\xff\xad\xf9\x8b\x39\x94\xc1\xa3\x0c\x0a\x96\xe3\x29\xb1\x0f\xe5\x32\x38\x8e\xa1\x16\x65\x86\x50\xa8\xc9\xa5\x80\xc5\x21\x33\x40\x82\x21\x61\x97\x02\xe6\xa7\xcc\xf0\xa8\x82\xfc\xe2\x13\x97\xc7\xcc\x10\x39\x87\xea\x62\x49\xca\x73\x66\x88\x92\x42\x82\xe4\x29\x90\xdf\xde\x42\x12\x23\xcb\x85\x71\x69\x0d\xb1\x92\x75\x75\x89\xe2\x45\xe5\xf3\x03\x90\xf7\x4e\x48\x04\x39\x91\x6f\xf3\x8f\x48\x74\x04\xe0\xd4\x01\x48\xf2\x09\x60\x5d\x60\x8a\x8f\x89\x31\x72\x41\x22\x09\x15\x93\xf5\x1c\xa4\xe8\x98\x28\x67\xae\x63\x2b\x0c\x95\x90\xb5\x32\x26\xfc\x98\x20\xe7\xae\x20\x15\x83\x48\x52\xf0\x56\x6d\x26\xa1\xde\x7f\x91\x17\xf4\xc1\x05\x2a\x25\xc4\xa5\x3a\x85\xf1\x78\x81\x16\xbe\xe8\x0a\xc7\x79\xc9\xcd\x4c\xef\x3f\xf6\x82\x7e\x77\x91\x58\xa8\x5b\x2b\x93\x0c\xc9\x9b\xe1\x3f\x7c\x95\x67\xd5\xf2\x71\x88\x4b\x9f\x3b\x58\xe9\x78\x3e\xa2\xe5\x5f\x56\x2e\x9e\x8f\x67\x39\xf6\x6b\x01\x5e\x70\xe0\xd7\xfb\xc9\x4e\xc3\xb3\xf1\xac\xfb\xc9\x2a\x94\xf3\xf1\xec\xfb\xc4\xb2\xb0\x4b\x0e\x5c\xa4\xde\x1e\xd2\x24\x7a\xc5\x69\x19\x2a\xaa\xb0\x09\xf7\xd1\x55\x33\x5c\x43\x75\x18\x97\xf3\xa2\x7e\x9a\x70\x57\x2e\x5c\x46\x20\x53\x87\x71\x89\x07\x37\xf6\x59\x79\x03\x0f\xd4\xc3\xc3\xda\x15\x2f\xe1\x10\x8b\xc3\xb8\xda\x83\xfb\xd3\x67\xeb\x0d\xb8\xc2\x83\x9b\xb8\x70\x85\x82\xac\x8c\x37\x37\x91\xd2\x97\x50\xe1\xee\xd9\x17\x34\x61\x6e\x7c\x46\xdc\xa0\x99\xf2\x68\x96\xfa\x7c\xd9\x5c\x9d\x99\x33\x53\xeb\xe2\xc8\xae\xa5\x26\xdc\x27\x17\x2e\xa5\x50\x99\x78\xcb\x45\xe5\x86\xab\x60\xbe\x79\x05\x68\xb8\xce\x2b\x01\x9e\x0a\xc4\x31\xc4\x46\xed\x72\x71\x0e\x90\x2d\xaf\x59\x9c\x03\x54\xe1\xde\xe6\x08\x8b\x63\xb9\xdf\x7a\x35\xad\x04\x48\x8e\xc5\xdd\xf9\x70\x4d\x2b\x98\xc5\x8b\x8e\xc5\x7d\xf6\xf5\x42\x95\xdc\x36\x84\x4a\x4f\x19\xbe\x78\x69\xb0\x05\xc7\xfa\xd8\x70\x7f\xf9\xc2\x35\x8b\x33\xf4\xaf\x76\xd3\x36\x9f\xff\x2f\xa0\xab\xd5\x48\x55\x52\x67\x8d\x64\x5e\xd8\xc4\x7b\xdf\xd7\xd8\x5f\xe4\x04\x57\xf3\xa6\x6b\x39\x41\x45\x40\x77\x05\x30\x44\x20\xa2\x07\xdc\x7d\xe0\xec\x20\x6c\x3d\x9d\xb8\x14\x7b\x70\x87\x5e\x77\x77\xe3\x32\x0f\xee\xc8\x2b\xb1\x1b\x57\x7a\x70\xc7\xbf\xb3\x64\x0f\x58\xab\x2a\xe2\xf2\x7a\xca\x5d\x11\x60\xaf\x3b\xff\xfa\xa1\xd7\xdd\x6c\xe7\x5f\x3f\xfc\x2f\x00\x00\xff\xff\x11\x53\x3e\x5c\xf3\x3e\x00\x00")

func imagesPatternBrSvgBytes() ([]byte, error) {
	return bindataRead(
		_imagesPatternBrSvg,
		"images/pattern-br.svg",
	)
}

func imagesPatternBrSvg() (*asset, error) {
	bytes, err := imagesPatternBrSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/pattern-br.svg", size: 16115, mode: os.FileMode(420), modTime: time.Unix(1602003003, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesPatternTlSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\xdd\x72\x9b\x3c\x13\xc7\xcf\x73\x15\x1a\x75\x32\xd3\x1c\x58\xd6\x07\x12\xd2\x3b\x26\x33\x8e\xdb\xf7\xb9\x0e\x37\xc6\x1f\x0d\x01\x17\x13\xdb\xe9\xd5\x3f\x03\x48\x44\xb6\x05\xc5\xd4\x7d\xe2\x74\x38\xd3\x7a\xa4\x7f\x76\x7f\xac\x56\x2b\xc8\x68\xb3\x5d\x80\xfd\x73\x14\x6f\x02\xb8\xcc\xb2\xf5\xff\x86\xc3\xdd\x6e\x87\x76\x0c\x25\xe9\x62\x48\x31\xc6\xc3\xcd\x76\x01\xc1\x6e\x35\xcb\x96\x01\x64\x98\x43\xb0\x0c\x57\x8b\x65\x16\x40\x4e\x7d\x08\xb6\xab\x70\xf7\x90\xec\x03\x88\x01\x06\x0c\x73\x90\xff\x7a\x7f\x03\xc0\x68\x16\xce\x37\xf9\x00\x80\x51\xb4\x8a\xc3\x69\xfa\x4f\x3a\x9d\xad\xc2\x38\x03\xab\x59\x00\xd7\xd3\x2c\x0b\xd3\x78\x90\x45\x83\x29\x04\x7b\x12\xc0\x01\x43\xd2\x53\xb7\x10\xec\x69\x00\x09\x36\xd6\x2b\x09\x20\xc7\xf9\x80\x96\x83\x52\x13\x80\xd1\x26\x4b\xd6\x20\x99\xcf\x37\x61\x16\x40\x22\x6e\x21\xc8\x7f\x19\x3c\x26\x51\x92\x06\xf0\x13\xf1\x26\x62\xf2\x00\x87\xee\xf9\xcc\x3b\x99\xcf\x1e\x26\x13\x52\x37\x5f\xf0\x93\xf9\x64\x4c\xc7\xa2\x6e\x3e\xc1\xf8\x78\x01\xfe\xe2\x4f\xfc\xff\x9b\x05\xa3\xe1\x21\x95\x56\xa8\xbe\x69\x54\x04\x29\xca\x2b\x54\xc6\xea\x51\x59\xa8\x1e\x2b\x54\x54\x32\x0b\x55\x69\xf5\xa8\x2c\x54\x33\x8d\x0a\x29\x41\x2b\x52\x58\x5b\x3d\x29\x8b\x54\x68\x48\xf9\xbe\x05\xaa\x30\x7a\x4e\x16\xa7\xb9\xe1\x24\x3c\x3b\xa3\x4a\xab\x27\x65\x91\x5a\x18\x52\x9c\x5b\xa0\x78\x5f\xce\x8f\x38\x2d\x0d\x27\x4f\x12\x0b\x54\x69\xf5\xa4\x2c\x52\xab\x8a\x14\x95\x36\xa9\xc2\xea\x49\x59\xa4\xbe\x1b\x52\x4c\xda\x9b\xaf\xb4\x7a\x52\x16\xa9\x27\x4d\xca\x47\x42\xbd\x25\x95\xb1\xfe\x10\x2a\xe2\x3b\xe6\xf3\x89\xaa\x9b\xef\x9d\xce\xc7\xea\xcb\xb8\x16\xad\x4f\x4e\x48\x7d\x95\x5c\xca\xba\xf9\xf2\xc4\xff\x0b\x90\x8d\x34\x59\x8a\xb8\x10\x15\x59\x63\xf5\x64\xbb\x93\x7d\xae\x2e\x00\xdc\xb3\xfa\xff\xc2\xe8\xb9\x76\xe7\x1a\x57\x3d\xb0\xdd\x02\xb7\x87\x8a\x6f\x6b\x6b\x1d\x73\xb9\x2b\xf1\x19\xb5\xee\xf0\xf9\x74\x8a\x2f\xa9\xf2\x86\x58\x69\x73\x46\x9b\x71\xed\x01\xae\x2f\xd0\x9c\x5f\x7b\x8c\x3f\x2e\x71\xfb\xbf\xf6\x20\xd3\xdf\xbe\x8d\x5e\x7b\x84\x9b\x0b\xbc\x99\xb8\xf6\x18\xb3\xea\x06\xa8\xec\x18\x4b\xeb\x2f\x89\xf1\xa5\x8a\x91\x30\x3b\x46\xf2\x17\xed\xc6\xad\x89\x51\x1e\x5c\xe5\xe5\x39\x77\xf9\x6b\x8f\x71\xf7\xdb\x6f\x2b\xae\x3d\xc2\xfd\x7b\xbc\x61\xe7\x27\x7d\x1d\xc1\xea\xeb\x98\xd6\xf6\x81\xea\xbc\x3e\x50\xfd\x89\x3e\xf0\xf5\x3d\x3e\xdb\x7c\x48\x52\x3f\xdf\xe3\x53\xc4\x87\x24\x35\x7e\x87\x2f\x11\x1f\x12\xd4\xc3\x7f\xfe\x21\xe2\x43\x62\x9a\xf4\x98\x6e\xf2\xdf\xcc\xb7\xf8\xd1\x02\xcc\x57\x51\x14\xc0\x38\x89\x43\x58\x8c\x07\xe9\x4b\x14\x06\x30\xdc\x86\x71\x32\x9b\xe5\xda\x69\xf2\x14\x0e\x72\x95\xc7\xe9\x3a\x80\x69\xf2\x12\xcf\x20\x48\xd6\xd3\xc7\x55\xf6\x1a\x40\x24\x20\xc8\xd2\x69\xbc\x99\x27\xe9\x73\x00\x8b\x61\x34\xcd\xc2\xcf\x04\x90\x3b\x68\x3d\x95\x12\xb7\x8f\x18\x2d\x61\x53\xce\x4b\xd8\x94\x72\xf3\x67\x02\xf8\x92\x46\x9f\x3f\xd9\xff\x0c\x70\x57\x45\x52\x89\x30\x0f\x09\x4f\x8b\xc8\x36\x22\xdf\x1c\x22\x9c\x20\x25\x4a\x11\x46\xda\x88\x3c\x3a\x44\x84\x42\x54\x6a\x11\xaf\x8d\xc8\xcc\x21\x22\x05\x32\x8e\xf8\x6d\x34\x42\x87\x46\x7e\xd0\x2a\x0d\xd6\xc3\x6d\x54\xe6\x2e\x15\x4a\x10\xd5\x64\x3d\xd6\x46\x65\xe1\x52\x61\x12\x71\x1d\x91\x27\xda\xa8\x2c\x5d\x2a\x9c\x23\x29\x7d\x2d\xa3\xda\xc8\xac\x5c\x32\x3e\x43\x14\x6b\x19\x4e\xdb\xc8\x7c\x77\x3d\x23\x24\x74\x44\xa4\x61\xe5\x93\x63\x25\xe5\x48\xe9\x14\xf1\x1a\x96\x46\xc7\x4b\x8b\x47\x80\x58\xe9\xaf\xdf\xb0\xf2\xd9\xb1\x52\x6f\xb3\xa3\x1d\x67\xb2\xcb\x56\x3b\xee\x91\x2b\x09\x81\x91\x38\x92\xe8\xe0\x88\xde\xaa\x47\xbb\xf6\x2c\x47\x7c\x1f\xa9\x23\x89\x0e\x8e\x28\x8e\xa8\x80\x07\x3b\xbf\x83\x8a\x5e\x7a\x54\x3f\xce\x0a\x87\x10\x8a\xb8\x84\x07\xe5\xa3\x83\x27\x7a\xe9\x51\x11\x3a\xcf\x13\xaa\x90\x82\x76\x09\xea\xe0\x07\x65\x0c\x49\xea\x43\x6b\xe7\xfb\xa5\x12\x11\x0d\x52\xb1\x2b\x69\x85\x87\xb8\x07\x0f\xeb\x59\x31\x6e\x10\x4a\x5c\x3e\x71\x82\x88\x67\x7c\xf2\x7c\x44\xa9\xf1\x49\xe2\x7a\xa9\xb5\xcb\xa7\x62\x75\xa9\xa4\x53\x28\xd7\x51\x0d\x32\x3f\x5c\x1e\x11\x81\x38\x36\x1e\xe5\xdc\xb1\xf1\x88\x37\x48\xa5\x2e\x8f\x24\x41\x52\xe7\xa0\xc9\xa5\x42\x88\x36\x08\x6d\x5c\x3e\x09\x89\x3c\x61\x7c\xaa\xaa\x6d\x6e\xa8\x06\xe0\xd9\x9b\xd4\x3a\x89\x5e\x0b\xb9\xba\xb9\x2f\x77\x10\xac\x93\x55\x9c\x6d\xaa\x42\x0c\x28\xe5\x80\x61\x86\x08\xf6\x8b\xff\x10\xd4\x23\x47\xa0\x4a\x21\x22\x2b\x66\xf9\xc9\x64\xfc\x63\x0d\xfe\x6d\x6b\x33\x4b\x4b\x51\xc9\x91\x6f\x0e\x16\x4a\x1a\xa8\xed\xea\x0b\x5a\xb1\xd6\x9c\x26\x8d\x99\xbe\x77\x1e\x4a\x55\x4d\x26\xad\x4e\xb6\xd7\xfa\x5a\x74\xe8\x49\x13\x99\x9f\xf5\x65\xe4\x50\xa4\x69\xbf\x8d\x1d\x22\x6f\x0d\x4c\xa5\xd1\x54\x46\x1e\x7e\x71\x60\x59\xad\x4c\xab\x7e\xe8\x57\x7a\x1d\x0f\x40\xeb\xe8\xb2\xfb\xa2\xce\x2e\x5d\xe0\x28\xbc\xc0\xf1\x63\x49\xd8\x7d\x5a\xe7\xa8\x2e\x70\x0e\x59\x12\x07\x4d\x5f\x2b\x9f\x26\xb5\xf9\x78\xd2\xfd\x9d\xa5\x37\x1a\x2e\xee\x6f\x46\xc3\xcd\x76\x71\x7f\xf3\x6f\x00\x00\x00\xff\xff\xcd\xf0\xb0\xac\x15\x2d\x00\x00")

func imagesPatternTlSvgBytes() ([]byte, error) {
	return bindataRead(
		_imagesPatternTlSvg,
		"images/pattern-tl.svg",
	)
}

func imagesPatternTlSvg() (*asset, error) {
	bytes, err := imagesPatternTlSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/pattern-tl.svg", size: 11541, mode: os.FileMode(420), modTime: time.Unix(1602006202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4d\xaf\xe4\x34\x10\x3c\xcf\xfb\x15\x4d\x0e\x9c\x66\xe3\xdd\x3d\x82\x27\x12\xda\x05\xb1\x12\x12\x88\x4f\x71\x74\x9c\x9e\x49\xf3\x1c\xb7\x71\x77\x12\xf2\xef\x91\x93\xc9\xcc\xa0\xf7\x80\x53\x3e\xdc\xae\x2a\x57\x57\xdb\x7e\xf6\xf1\xfb\x0f\x3f\xff\xfe\xc3\xd7\xd0\xeb\x10\x9a\x27\xbb\x3d\x0e\xb6\x47\xd7\x35\x4f\x87\x83\x55\xd2\x80\xcd\xb7\x4e\x7a\xfa\xc0\x39\xc1\x6f\x6e\x49\x4c\x51\xe1\x97\x1f\xbf\x83\x9f\x30\x4f\xe4\xd1\x9a\xad\xaa\xd4\x07\x8a\xcf\x90\x31\x9c\x2a\xd1\x25\xa0\xf4\x88\x5a\x81\x2e\x09\x4f\x95\xe2\x5f\x6a\xbc\x48\x05\x7d\xc6\xf3\xa9\x32\xa2\x4e\xc9\x9b\xb5\xb2\x5e\x17\x4c\x21\x37\x1b\xfb\xd3\xc1\xb6\xdc\x2d\x2b\x6c\x47\x13\xf8\xe0\x44\x4e\x95\xe7\xa8\x8e\x22\xe6\xaa\xac\x6c\x52\x31\xaf\xef\x07\xeb\xae\xd0\xbd\x6a\x92\x2f\x8c\x99\xaf\x72\x53\xe6\x3f\xd0\x6b\x4d\x5c\xed\x38\x81\x2f\xbc\x41\x1c\x0e\x96\x86\x0b\x48\xf6\x77\x4d\x34\xb8\x0b\x8a\x29\x45\xb5\x4c\x97\x6b\xa1\x35\x6e\x23\x35\x0f\xac\x56\xd0\x2b\x71\x7c\x14\x88\x51\xf7\x2d\xfd\xbb\xc6\xb6\xcd\xee\x9b\x35\x6d\x03\x24\xe0\x40\x99\x03\xb4\x23\x05\x85\x76\x81\x17\xca\xfb\x62\xb9\xe7\x9c\x6a\xcf\x43\x75\xef\x40\x91\x00\x67\xce\xeb\xd6\x8e\xe2\xe5\x08\x1d\xa6\xc0\x0b\xc5\x0b\xb8\xd8\x15\xf3\xd1\xc9\xfa\x95\x52\x20\xef\x8a\x36\xa9\xad\xe9\xdf\xed\x26\x09\x75\xb8\x9f\x3c\x35\x5f\x3d\x94\x5d\xb1\xb0\x83\x99\xb4\xbf\x77\x3b\xa3\x47\x9a\x10\x1c\xa4\xb1\x0d\xe4\xc1\x7a\xee\xb0\xd9\xed\xad\xf3\x18\xad\x59\x7f\xad\xc1\x08\xf4\x8c\xa0\x3d\x09\x70\xc4\xe3\x2a\x77\x22\x9c\x77\x89\xd2\xbb\x5c\xde\x6f\x64\xff\x54\x9a\x6e\x66\xdf\x85\xda\x74\xb3\x10\x5c\x08\x3c\x17\xa9\x13\x06\x4e\x98\x05\x94\xa1\xc3\x33\xc5\x42\x8a\x94\x1f\xf1\x36\x9f\x76\x93\x8e\x0f\x16\x21\x04\x3a\xa3\x5f\x7c\x40\x70\x02\x45\xfd\x11\x32\x76\xa3\x2f\xda\xb4\x47\x50\x1a\x70\xc3\x0e\x34\x61\xbe\x62\x0c\x18\x55\x40\xfb\xcc\xe3\xa5\x07\x07\x9e\xa3\x90\x94\x96\x5f\xc1\x13\x3a\x75\x6d\x40\x98\x39\x3f\x9f\x03\xcf\xb5\x35\xfb\x99\xd2\x9e\x12\xb7\x66\x46\x6e\x09\x74\xfb\x42\x3b\xaa\xae\xb2\xcb\xe3\xcd\x9b\x94\x69\x70\x79\xa9\xfe\x37\xd8\xa6\x6a\x7e\x25\x21\x85\x97\x4b\x7b\x6c\xff\x83\x46\xd0\x73\xec\x5e\x23\x9a\xe7\xfa\x15\xb2\x8e\xbd\x98\x31\x87\x42\x8a\x33\x74\xec\xc7\xe2\xcb\x6a\xf9\x8d\x6e\x3f\xb6\x35\xd7\x11\xd9\xbe\xce\xcc\x7a\x9b\xd8\xd4\x7c\x3a\xc3\xc2\x23\xf4\x6e\x42\xf8\x73\x44\xd9\x82\xe8\x5a\x1e\xf5\x16\xc0\x23\xa4\xad\x65\xeb\xf4\x7b\x85\x51\xc0\xe9\xda\xa4\x17\x93\xd3\x91\xf8\x51\xa4\xfe\xb7\x09\x82\x8f\x5b\x41\x09\xc7\x37\x9c\xc7\x41\x8a\xe0\xc7\x1e\x35\x56\x06\x17\x42\xf3\xb9\xe7\xb4\x7c\x09\xef\xdf\xbe\x7f\x0b\xb7\xed\x47\xf8\x14\x7d\x6d\xcd\x56\x72\x3f\xe2\xfd\x54\xd6\x74\x34\xad\x17\xd9\x76\x7f\x59\xb3\x5d\xab\x7f\x07\x00\x00\xff\xff\xa6\x05\x0c\xa9\x6e\x05\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 1390, mode: os.FileMode(420), modTime: time.Unix(1602630966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _styleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\xe1\x6e\xdb\x38\x12\xfe\x1d\x3f\xc5\xa0\xc1\x21\xf1\xc1\x74\x25\xd9\x56\x1c\xf9\x57\xaf\x87\xe2\x0e\xd8\xee\x02\x0d\xfa\x00\x94\x34\x92\xb9\xa5\x48\x81\xa4\x12\x7b\x17\x7d\xf7\x05\x49\x5b\x96\x64\xd9\x71\x81\xc0\x11\x87\xa3\x8f\xdf\x7c\x33\x1c\x91\x89\x92\xd2\xc0\xdf\x93\x3b\x42\x0c\xee\x4c\x02\xf7\xb8\xc4\x15\x3e\x6d\x8e\x16\x52\x35\x06\xf3\x04\xee\x9f\xc3\xe7\xf5\xa7\xd0\xd9\x53\x9a\xfd\x28\x95\x6c\x84\xb5\x07\x41\xe0\x8d\x8a\xfa\xf1\x32\x8b\xb3\xc8\x99\xb6\x48\x73\xce\x04\x26\x70\x5f\x14\xc5\x66\xe2\xdc\x1a\x63\xa4\x20\xb5\x62\x15\x55\xfb\x04\xee\xc3\x55\xbc\xb0\x93\x67\x73\x64\x2b\x5f\x51\x25\x70\xbf\x58\x3f\xd1\x71\x0f\x9a\x19\xf6\x8a\x57\x41\x0e\x51\x15\xe3\xb3\xa9\x54\xf9\x85\x35\x34\x66\x52\xe4\x9e\xe3\x2a\x5a\x3d\xc5\xe1\xe8\x6c\xcb\x32\x8e\xe2\xf5\xd3\x62\xdc\xa7\xe5\x79\x0d\xe8\xa8\x7f\x8a\x58\x44\xe3\x2e\x2d\xdd\xb8\x78\x8a\xd7\xd1\x66\xf2\x73\x32\xf9\xb7\xcd\x5e\x45\x55\xc9\x44\x02\x36\x15\x35\xcd\x73\x26\x4a\x37\xf8\x39\x99\x6c\x4d\xc5\x67\x90\xca\x7c\xef\x1c\x99\x20\x5b\x64\xe5\xd6\x24\x10\x06\xc1\xeb\xd6\xf9\x1c\x67\x0b\x29\x0c\x29\x68\xc5\xf8\x3e\x81\xff\x70\x26\x7e\x7c\xa5\xd9\xcb\x5e\x1b\xac\xbe\x48\x61\x66\x40\x68\x5d\x73\x24\xda\x99\x66\xf0\xe1\x05\x4b\x89\xf0\xfd\xff\x1f\x66\xf0\xe1\x9b\x4c\xa5\x91\xf6\xe9\x8f\xdd\xbe\x44\x61\x9f\xbe\xa7\x8d\x30\x8d\x7d\xfa\x4c\x85\xa1\x0a\x39\xb7\x83\x2f\x4c\x51\x78\xa1\x42\xdb\xc1\x7f\x95\x64\x79\x3b\xfa\x1f\xf2\x57\x34\x2c\xa3\xf0\x3b\x36\xd8\xb3\xd8\xc1\x27\xc5\xa8\x85\xd0\x54\x68\xa2\x51\x31\x9b\x33\x47\x5b\xb3\xbf\x30\x81\x70\x59\xef\x36\x93\x3b\x5b\x75\x6d\x9c\x91\xb7\x65\x92\x4b\x95\xc0\x2b\x55\x8f\xbe\xb4\xa7\x9b\xc9\x5d\xb7\x94\x1b\xc5\x1f\x3f\x6a\x43\x0d\xcb\x3e\xb2\x8a\x96\xa8\x3f\xd6\xd4\x18\x54\x82\xa4\x6a\xae\x5f\xcb\x29\x08\x49\x14\xd6\x48\x0d\xa4\xd2\x18\x59\x81\xb2\x4b\x1c\x30\x4f\x58\xd3\x56\xd5\xf9\x96\x6a\x82\x4a\x49\x65\xf5\x75\x1b\x8a\x72\x56\x8a\x04\x32\x14\x06\xd5\x66\x02\xd0\xe5\x70\x0b\x52\x92\xa4\x58\x48\x85\x3e\xab\x5d\x3b\x2d\x0c\xba\x85\x0a\xc6\x8d\x2d\x14\x4d\x4d\xa3\xa8\xc1\xc7\xc0\x06\x2b\x6b\x9a\x31\xb3\x4f\x60\xbe\xba\x02\x6b\xdf\xcf\xa4\x30\x28\x4c\x02\x0f\x0f\xb6\xa2\xa4\x66\x86\x49\x91\x00\x4d\xb5\xe4\x8d\xc1\xcd\xe4\xce\xc8\xda\xd7\x1b\xc7\xc2\xf8\xa7\x37\x96\x9b\x6d\x02\x8b\xc0\x0b\x7e\xd4\x7f\x15\xad\xdc\xf8\x46\xad\x0d\x1f\x68\x3d\xca\xb5\x0d\xf5\x06\xaa\x3e\x57\x9e\xa3\xf2\x9c\x3a\x74\xa3\xf5\xaa\x47\x37\x0e\x82\x5f\xa1\x7b\x56\x1a\x63\xb9\x9f\x73\x59\x4a\x60\x55\x39\xcc\x19\x14\x52\xda\x40\x58\x55\x5e\xc8\x1b\xa4\x8e\xb2\x40\xad\x1f\xc3\x60\x90\xc7\xc8\x27\x92\x7a\x21\x5c\x7d\x33\xb1\x45\xc5\x3c\x8b\xb9\x15\x87\x32\xe1\x95\x3a\x69\xa3\x90\x53\xdb\x91\x36\x93\xbb\x9c\xe9\x9a\xd3\x7d\x02\x05\x47\x1b\xb5\xfd\x47\x72\xa6\x30\xf3\xae\x99\xe4\x4d\x25\x36\xb6\xc5\xec\xc8\x41\xb1\xe5\xb3\x57\xa8\xdb\x4c\x32\xca\xb3\x47\xd7\x51\x80\x40\x1c\xd4\x3b\x20\xb0\x0c\xea\xdd\xb4\xdb\x91\x9c\xdd\xfd\x2c\x1d\x82\xa5\xd8\x11\xa9\xc7\xf6\x22\xf8\xda\x83\xc7\x1e\x1c\xa0\x45\x5f\xb7\xe8\xf1\x81\xdf\xb1\x2b\x02\x6d\x8c\x74\xcb\x69\x1f\x97\x5d\xe0\xe6\xc8\xdd\x44\xa9\xe4\x5b\x02\x61\x37\x9a\xe5\xba\xde\x41\x00\xd1\x48\x28\x9d\x65\xdc\x76\x27\xcc\x60\xa5\xbb\x9b\xfe\xcf\x46\x1b\x56\xec\x49\x5b\xbe\xc7\xa9\x81\x5a\x41\x8f\xf6\xdc\xc1\x13\x96\x39\x6c\x80\x41\x0c\x00\xbf\xba\x1a\xc0\x21\xa7\x6b\x17\x05\xc0\x51\xf2\xe3\xd8\x7f\x72\x88\xa2\x39\x6b\xb4\xfb\x66\xfc\xeb\x64\x4e\x20\xac\x77\xa0\x25\x67\x39\xa8\x32\xa5\x8f\xe1\xf3\x7a\x06\x4b\xf7\x37\x5f\x4d\x87\xcd\xed\xcc\x25\x5c\x4d\x7b\xe1\x6d\xc3\x4e\x21\xfb\x56\x78\x3c\x43\x4c\x07\x7d\x7e\xed\x32\xec\x2c\x6f\x07\xca\xcb\x20\xb8\x94\x07\x0f\xdc\xf3\x8e\xad\x77\xa7\x7a\x96\x4e\x6d\x58\x1f\x92\xd9\x79\x93\xce\xba\xa3\x74\x1c\xa9\xf3\x4a\xed\x36\x9b\xc7\x25\xae\x4d\x2e\xa2\xcb\x25\x72\xee\x1d\x46\x03\x0e\x54\xb3\x1c\xcf\x94\x39\x9d\xce\x86\xda\x2c\x3b\xd5\xdf\x25\x70\x2a\x2d\x5b\xb9\x61\xec\xdb\x5c\x3f\xc1\xd1\x59\xef\x73\x59\x8b\x56\xab\x19\x9c\x7e\xe6\xe1\x74\x84\x61\x37\x94\x64\x50\xb9\xde\x23\x93\x3e\x90\xde\x41\xe3\xe1\xe5\xcb\x57\x29\x24\xf9\x86\x65\xc3\xa9\x7a\x98\xc1\x67\x29\xb4\xe4\x54\xcf\xe0\xe1\x37\x96\xa2\xa2\x0e\xc2\x3a\x3d\xcc\xe0\x2b\x0a\x2e\xad\x4f\xa3\x18\xaa\x19\x54\x52\x48\x5d\xd3\x0c\x07\x2a\x2c\xfa\x21\x47\xb6\xeb\x0c\xda\x42\x34\xa6\xc0\xe2\x46\x05\x06\xb5\x5b\xcf\xa9\x7b\xd0\x17\x5b\xed\x71\x5d\x32\xac\x31\x3a\xf7\x27\xbd\x56\x99\x5e\x1e\x7b\xb5\xb6\x72\xa7\xed\x76\xdb\x33\xe1\x4e\x3a\x87\x0e\x36\xba\xf9\xef\x2e\x77\x9a\xf1\x53\xe3\xd5\xc2\x70\x45\x97\x63\x26\x7d\x4e\x12\x10\x52\xd8\xd8\xde\xb6\xcc\x20\x71\x69\xb0\xb6\x37\x45\xeb\xc1\x07\x62\x11\xf7\xc4\xbf\xa4\x01\x39\x9e\xcd\xcf\xea\x7d\xe4\x60\x3f\x3c\xc1\x8d\x39\x4e\xdb\x50\xba\xdd\x6a\x14\xd2\xbb\x4d\x8f\x61\xea\x2d\xcd\x6d\xd3\x0f\xdc\x7b\x81\x2f\x83\x60\x06\xfe\x6f\xbe\x98\x5e\x0f\x20\x71\x37\x03\x1b\xc6\x7b\x14\xfd\x1d\xe2\x3d\x38\x7f\x89\xb8\x09\xcf\xbb\x5e\x02\x6c\xef\x13\x97\x24\xee\xdf\x49\xae\x8a\xdc\xba\xde\x20\xf3\xf0\x1e\xf3\x2e\xbf\x1b\x14\x1c\xdc\xc3\xde\x87\xbc\x41\xc5\xe1\xbd\xcd\x83\x1e\x0e\x6a\x57\xbb\xf0\xc9\xed\xbc\xab\xfb\x5b\xc8\xc9\x43\x57\x94\xf3\xe1\x8e\x3f\x74\xfe\x7f\x02\x00\x00\xff\xff\x01\x23\xea\x51\x96\x0f\x00\x00")

func styleCssBytes() ([]byte, error) {
	return bindataRead(
		_styleCss,
		"style.css",
	)
}

func styleCss() (*asset, error) {
	bytes, err := styleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "style.css", size: 3990, mode: os.FileMode(420), modTime: time.Unix(1602630668, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"error.html":            errorHtml,
	"images/error.svg":      imagesErrorSvg,
	"images/hashi.svg":      imagesHashiSvg,
	"images/logo.svg":       imagesLogoSvg,
	"images/pattern-br.svg": imagesPatternBrSvg,
	"images/pattern-tl.svg": imagesPatternTlSvg,
	"index.html":            indexHtml,
	"style.css":             styleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"error.html": &bintree{errorHtml, map[string]*bintree{}},
	"images": &bintree{nil, map[string]*bintree{
		"error.svg":      &bintree{imagesErrorSvg, map[string]*bintree{}},
		"hashi.svg":      &bintree{imagesHashiSvg, map[string]*bintree{}},
		"logo.svg":       &bintree{imagesLogoSvg, map[string]*bintree{}},
		"pattern-br.svg": &bintree{imagesPatternBrSvg, map[string]*bintree{}},
		"pattern-tl.svg": &bintree{imagesPatternTlSvg, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"style.css":  &bintree{styleCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
