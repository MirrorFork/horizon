// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flow.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FlowRecord struct {
	Agent *FlowRecord_AgentConnection `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (m *FlowRecord) Reset()      { *m = FlowRecord{} }
func (*FlowRecord) ProtoMessage() {}
func (*FlowRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{0}
}
func (m *FlowRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowRecord.Merge(m, src)
}
func (m *FlowRecord) XXX_Size() int {
	return m.Size()
}
func (m *FlowRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowRecord.DiscardUnknown(m)
}

var xxx_messageInfo_FlowRecord proto.InternalMessageInfo

func (m *FlowRecord) GetAgent() *FlowRecord_AgentConnection {
	if m != nil {
		return m.Agent
	}
	return nil
}

type FlowRecord_AgentConnection struct {
	HubId         *ULID      `protobuf:"bytes,1,opt,name=hub_id,json=hubId,proto3" json:"hub_id,omitempty"`
	AgentId       *ULID      `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	AccountId     *ULID      `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	StartedAt     *Timestamp `protobuf:"bytes,10,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	NumServices   int32      `protobuf:"varint,11,opt,name=num_services,json=numServices,proto3" json:"num_services,omitempty"`
	TotalMessages int64      `protobuf:"varint,12,opt,name=total_messages,json=totalMessages,proto3" json:"total_messages,omitempty"`
	TotalBytes    int64      `protobuf:"varint,13,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	TotalStreams  int64      `protobuf:"varint,14,opt,name=total_streams,json=totalStreams,proto3" json:"total_streams,omitempty"`
}

func (m *FlowRecord_AgentConnection) Reset()      { *m = FlowRecord_AgentConnection{} }
func (*FlowRecord_AgentConnection) ProtoMessage() {}
func (*FlowRecord_AgentConnection) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{0, 0}
}
func (m *FlowRecord_AgentConnection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowRecord_AgentConnection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowRecord_AgentConnection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowRecord_AgentConnection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowRecord_AgentConnection.Merge(m, src)
}
func (m *FlowRecord_AgentConnection) XXX_Size() int {
	return m.Size()
}
func (m *FlowRecord_AgentConnection) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowRecord_AgentConnection.DiscardUnknown(m)
}

var xxx_messageInfo_FlowRecord_AgentConnection proto.InternalMessageInfo

func (m *FlowRecord_AgentConnection) GetHubId() *ULID {
	if m != nil {
		return m.HubId
	}
	return nil
}

func (m *FlowRecord_AgentConnection) GetAgentId() *ULID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

func (m *FlowRecord_AgentConnection) GetAccountId() *ULID {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *FlowRecord_AgentConnection) GetStartedAt() *Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *FlowRecord_AgentConnection) GetNumServices() int32 {
	if m != nil {
		return m.NumServices
	}
	return 0
}

func (m *FlowRecord_AgentConnection) GetTotalMessages() int64 {
	if m != nil {
		return m.TotalMessages
	}
	return 0
}

func (m *FlowRecord_AgentConnection) GetTotalBytes() int64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func (m *FlowRecord_AgentConnection) GetTotalStreams() int64 {
	if m != nil {
		return m.TotalStreams
	}
	return 0
}

func init() {
	proto.RegisterType((*FlowRecord)(nil), "pb.FlowRecord")
	proto.RegisterType((*FlowRecord_AgentConnection)(nil), "pb.FlowRecord.AgentConnection")
}

func init() { proto.RegisterFile("flow.proto", fileDescriptor_bb3fc33c49933823) }

var fileDescriptor_bb3fc33c49933823 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0x40, 0x33, 0x2d, 0xed, 0xd7, 0xde, 0xf4, 0x07, 0x66, 0x15, 0xba, 0x98, 0xf6, 0xb3, 0x88,
	0x5d, 0x48, 0x16, 0xda, 0x17, 0x68, 0x15, 0x21, 0xa0, 0x9b, 0x54, 0xd7, 0x61, 0x92, 0x8c, 0x6d,
	0x20, 0xc9, 0x84, 0xcc, 0xc4, 0xe2, 0x4e, 0xf0, 0x05, 0x7c, 0x0c, 0x9f, 0xc2, 0xb5, 0xcb, 0x2e,
	0xbb, 0xb4, 0xe9, 0xc6, 0x65, 0x1f, 0x41, 0x32, 0x89, 0x08, 0x5d, 0xce, 0x39, 0xe7, 0x5e, 0x18,
	0x2e, 0xc0, 0x63, 0xc8, 0xd7, 0x66, 0x92, 0x72, 0xc9, 0x71, 0x2d, 0x71, 0x07, 0x90, 0x85, 0x81,
	0x5f, 0xbe, 0x07, 0x7d, 0x19, 0x44, 0x4c, 0x48, 0x1a, 0x25, 0x25, 0x38, 0x79, 0xad, 0x03, 0xdc,
	0x84, 0x7c, 0x6d, 0x33, 0x8f, 0xa7, 0x3e, 0x9e, 0x42, 0x83, 0x2e, 0x59, 0x2c, 0x0d, 0x34, 0x42,
	0x13, 0xfd, 0x82, 0x98, 0x89, 0x6b, 0xfe, 0x69, 0x73, 0x56, 0xb8, 0x2b, 0x1e, 0xc7, 0xcc, 0x93,
	0x01, 0x8f, 0xed, 0x32, 0x1e, 0x7c, 0xd4, 0xa0, 0x7f, 0xa4, 0xf0, 0x10, 0x9a, 0xab, 0xcc, 0x75,
	0x02, 0xbf, 0x5a, 0xd5, 0x2a, 0x56, 0x3d, 0xdc, 0x5a, 0xd7, 0x76, 0x63, 0x95, 0xb9, 0x96, 0x8f,
	0xc7, 0xd0, 0x52, 0xd3, 0x45, 0x52, 0x3b, 0x4a, 0xfe, 0x29, 0x63, 0xf9, 0xf8, 0x0c, 0x80, 0x7a,
	0x1e, 0xcf, 0xca, 0xac, 0x7e, 0x94, 0xb5, 0x2b, 0x67, 0xf9, 0xf8, 0x1c, 0x40, 0x48, 0x9a, 0x4a,
	0xe6, 0x3b, 0x54, 0x1a, 0xa0, 0xc2, 0x6e, 0x11, 0xde, 0xff, 0x7e, 0xd8, 0x6e, 0x57, 0xc1, 0x4c,
	0xe2, 0xff, 0xd0, 0x89, 0xb3, 0xc8, 0x11, 0x2c, 0x7d, 0x0a, 0x3c, 0x26, 0x0c, 0x7d, 0x84, 0x26,
	0x0d, 0x5b, 0x8f, 0xb3, 0x68, 0x51, 0x21, 0x7c, 0x0a, 0x3d, 0xc9, 0x25, 0x0d, 0x9d, 0x88, 0x09,
	0x41, 0x97, 0x4c, 0x18, 0x9d, 0x11, 0x9a, 0xd4, 0xed, 0xae, 0xa2, 0x77, 0x15, 0xc4, 0x43, 0xd0,
	0xcb, 0xcc, 0x7d, 0x96, 0x4c, 0x18, 0x5d, 0xd5, 0x80, 0x42, 0xf3, 0x82, 0xe0, 0x31, 0x94, 0x13,
	0x8e, 0x90, 0x29, 0xa3, 0x91, 0x30, 0x7a, 0x2a, 0xe9, 0x28, 0xb8, 0x28, 0xd9, 0x7c, 0xba, 0xd9,
	0x11, 0x6d, 0xbb, 0x23, 0xda, 0x61, 0x47, 0xd0, 0x4b, 0x4e, 0xd0, 0x7b, 0x4e, 0xd0, 0x67, 0x4e,
	0xd0, 0x26, 0x27, 0xe8, 0x2b, 0x27, 0xe8, 0x3b, 0x27, 0xda, 0x21, 0x27, 0xe8, 0x6d, 0x4f, 0xb4,
	0xcd, 0x9e, 0x68, 0xdb, 0x3d, 0xd1, 0xdc, 0xa6, 0x3a, 0xe1, 0xe5, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x36, 0xc7, 0x7f, 0x22, 0xf1, 0x01, 0x00, 0x00,
}

func (this *FlowRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowRecord)
	if !ok {
		that2, ok := that.(FlowRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Agent.Equal(that1.Agent) {
		return false
	}
	return true
}
func (this *FlowRecord_AgentConnection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowRecord_AgentConnection)
	if !ok {
		that2, ok := that.(FlowRecord_AgentConnection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HubId.Equal(that1.HubId) {
		return false
	}
	if !this.AgentId.Equal(that1.AgentId) {
		return false
	}
	if !this.AccountId.Equal(that1.AccountId) {
		return false
	}
	if !this.StartedAt.Equal(that1.StartedAt) {
		return false
	}
	if this.NumServices != that1.NumServices {
		return false
	}
	if this.TotalMessages != that1.TotalMessages {
		return false
	}
	if this.TotalBytes != that1.TotalBytes {
		return false
	}
	if this.TotalStreams != that1.TotalStreams {
		return false
	}
	return true
}
func (this *FlowRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.FlowRecord{")
	if this.Agent != nil {
		s = append(s, "Agent: "+fmt.Sprintf("%#v", this.Agent)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FlowRecord_AgentConnection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.FlowRecord_AgentConnection{")
	if this.HubId != nil {
		s = append(s, "HubId: "+fmt.Sprintf("%#v", this.HubId)+",\n")
	}
	if this.AgentId != nil {
		s = append(s, "AgentId: "+fmt.Sprintf("%#v", this.AgentId)+",\n")
	}
	if this.AccountId != nil {
		s = append(s, "AccountId: "+fmt.Sprintf("%#v", this.AccountId)+",\n")
	}
	if this.StartedAt != nil {
		s = append(s, "StartedAt: "+fmt.Sprintf("%#v", this.StartedAt)+",\n")
	}
	s = append(s, "NumServices: "+fmt.Sprintf("%#v", this.NumServices)+",\n")
	s = append(s, "TotalMessages: "+fmt.Sprintf("%#v", this.TotalMessages)+",\n")
	s = append(s, "TotalBytes: "+fmt.Sprintf("%#v", this.TotalBytes)+",\n")
	s = append(s, "TotalStreams: "+fmt.Sprintf("%#v", this.TotalStreams)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFlow(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FlowRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Agent != nil {
		{
			size, err := m.Agent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FlowRecord_AgentConnection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowRecord_AgentConnection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowRecord_AgentConnection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalStreams != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.TotalStreams))
		i--
		dAtA[i] = 0x70
	}
	if m.TotalBytes != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.TotalBytes))
		i--
		dAtA[i] = 0x68
	}
	if m.TotalMessages != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.TotalMessages))
		i--
		dAtA[i] = 0x60
	}
	if m.NumServices != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.NumServices))
		i--
		dAtA[i] = 0x58
	}
	if m.StartedAt != nil {
		{
			size, err := m.StartedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.AccountId != nil {
		{
			size, err := m.AccountId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AgentId != nil {
		{
			size, err := m.AgentId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.HubId != nil {
		{
			size, err := m.HubId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFlow(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FlowRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Agent != nil {
		l = m.Agent.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	return n
}

func (m *FlowRecord_AgentConnection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HubId != nil {
		l = m.HubId.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.AgentId != nil {
		l = m.AgentId.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.AccountId != nil {
		l = m.AccountId.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.StartedAt != nil {
		l = m.StartedAt.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.NumServices != 0 {
		n += 1 + sovFlow(uint64(m.NumServices))
	}
	if m.TotalMessages != 0 {
		n += 1 + sovFlow(uint64(m.TotalMessages))
	}
	if m.TotalBytes != 0 {
		n += 1 + sovFlow(uint64(m.TotalBytes))
	}
	if m.TotalStreams != 0 {
		n += 1 + sovFlow(uint64(m.TotalStreams))
	}
	return n
}

func sovFlow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlow(x uint64) (n int) {
	return sovFlow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FlowRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowRecord{`,
		`Agent:` + strings.Replace(fmt.Sprintf("%v", this.Agent), "FlowRecord_AgentConnection", "FlowRecord_AgentConnection", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowRecord_AgentConnection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowRecord_AgentConnection{`,
		`HubId:` + strings.Replace(fmt.Sprintf("%v", this.HubId), "ULID", "ULID", 1) + `,`,
		`AgentId:` + strings.Replace(fmt.Sprintf("%v", this.AgentId), "ULID", "ULID", 1) + `,`,
		`AccountId:` + strings.Replace(fmt.Sprintf("%v", this.AccountId), "ULID", "ULID", 1) + `,`,
		`StartedAt:` + strings.Replace(fmt.Sprintf("%v", this.StartedAt), "Timestamp", "Timestamp", 1) + `,`,
		`NumServices:` + fmt.Sprintf("%v", this.NumServices) + `,`,
		`TotalMessages:` + fmt.Sprintf("%v", this.TotalMessages) + `,`,
		`TotalBytes:` + fmt.Sprintf("%v", this.TotalBytes) + `,`,
		`TotalStreams:` + fmt.Sprintf("%v", this.TotalStreams) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFlow(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FlowRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Agent == nil {
				m.Agent = &FlowRecord_AgentConnection{}
			}
			if err := m.Agent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowRecord_AgentConnection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentConnection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentConnection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HubId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HubId == nil {
				m.HubId = &ULID{}
			}
			if err := m.HubId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentId == nil {
				m.AgentId = &ULID{}
			}
			if err := m.AgentId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountId == nil {
				m.AccountId = &ULID{}
			}
			if err := m.AccountId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedAt == nil {
				m.StartedAt = &Timestamp{}
			}
			if err := m.StartedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumServices", wireType)
			}
			m.NumServices = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumServices |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMessages", wireType)
			}
			m.TotalMessages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalMessages |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBytes", wireType)
			}
			m.TotalBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStreams", wireType)
			}
			m.TotalStreams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStreams |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFlow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFlow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFlow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFlow = fmt.Errorf("proto: unexpected end of group")
)
