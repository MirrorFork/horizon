syntax = "proto3";

import "defs/gogo.proto";
import "kv.proto";
import "label.proto";
import "account.proto";
import "ulid.proto";
import "token.proto";
import "timestamp.proto";

package pb;

message ServiceRequest {
  Account account = 1;
  ULID hub = 2;
  ULID id = 3;
  string type = 4;
  LabelSet labels = 5;
  repeated KVPair metadata = 6;
}

message ServiceResponse {}

message LabelLink {
  Account account = 1;
  LabelSet labels = 2;
  LabelSet target = 3;
}

message LabelLinks {
  repeated LabelLink label_links = 1;
}

message ServiceRoute {
  ULID hub = 1;
  ULID id = 2;
  string type = 3;
  LabelSet labels = 4;
}

message AccountServices {
  Account account = 1;
  repeated ServiceRoute services = 2;
}

message ActivityEntry {
  AccountServices route_added = 1;
  ULID route_removed = 2;
}

message ConfigRequest {
  ULID hub = 1;
  string public_ip = 2;
  string private_ip = 3;
}

message ConfigResponse {
  bytes tls_key = 1;
  bytes tls_cert = 2;
  bytes serf_key = 3;
}

message CentralActivity {
  repeated AccountServices account_services = 1;
  bool request_stats = 2;
  LabelLinks new_label_links = 3;
}

message HubActivity {
  ULID hub = 1;
  Timestamp sent_at = 2;

  message HubStats {
    int64 agent_connections = 1;
    int64 accounts_seen = 2;
    int64 accounts_cached = 3;
    int64 cached_bytes = 4;
    Timestamp last_successful_update = 5;
    Timestamp last_attempted_update = 6;
  }

  HubStats stats = 3;
}

service ControlServices {
  rpc AddService(ServiceRequest) returns (ServiceResponse) {}
  rpc RemoveService(ServiceRequest) returns (ServiceResponse) {}
  rpc FetchConfig(ConfigRequest) returns (ConfigResponse) {}
  rpc StreamActivity(stream HubActivity) returns (stream CentralActivity) {}
}

message AddLabelLinkRequest {
  LabelSet labels = 1;
  Account account = 2;
  LabelSet target = 3;
}

message Noop {}

message RemoveLabelLinkRequest {
  LabelSet labels = 1;
  Account account = 2;
}

message CreateTokenRequest {
  Account account = 1;
  repeated TokenCapability capabilities = 2 [(gogoproto.nullable) = false];
  Timestamp valid_duration = 3;
}

message CreateTokenResponse {
  string token = 1;
}

message ControlRegister {
  string namespace = 1;
}

message ControlToken {
  string token = 1;
}

service ControlManagement {
  rpc Register(ControlRegister) returns (ControlToken) {}
  rpc AddLabelLink(AddLabelLinkRequest) returns (Noop) {}
  rpc RemoveLabelLink(RemoveLabelLinkRequest) returns (Noop) {}
  rpc CreateToken(CreateTokenRequest) returns (CreateTokenResponse) {}
  rpc IssueHubToken(Noop) returns (CreateTokenResponse) {}
}
